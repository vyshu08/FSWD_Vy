        DATABASE ASSIGNMENT
1. What is a Database? Explain with an example why on we should need Database.
Ans. Database software makes data management simpler by enabling users to store data in a structured form and then access it. It typically has a graphical interface to help create and manage the data and, in some cases, users can construct their own databases by using database software.
Example An online telephone directory uses a database to store data of people, phone numbers, and other contact details
2. Write a short note on  File base storage system. Explain the major challenges of a File-based storage system
Ans. The File based system is limited to a smaller size and cannot store large amounts of data. This system is relatively uncomplicated but this means it cannot support complicated queries, data recovery etc. There may be redundant data in the file-based system as it does not have a complex mechanism to get rid of it
The major challenges of a File-based storage system are 
The data is not very secure in a file-based system and may be corrupted or destroyed. The data files in the file-based system may be stored across multiple locations. Consequently, it is difficult to share the data easily with multiple users
3. What is DBMS? What was the need for DBMS?
Ans. Database Management Systems (DBMS) are software systems used to store, retrieve, and run queries on data. A DBMS serves as an interface between an end-user and a database, allowing users to create, read, update, and delete data in the database.
Databases let us work with large amounts of data efficiently. They make updating data easy and reliable, and they help to ensure accuracy. They offer security features to control access to information, and they help us avoid redundancy.
4. Explain 5 challenges of a File-based storage system. Which was tackled by DBMS.
Ans. A file-based storage system refers to a traditional approach where data is stored in files, often organized in a hierarchical directory structure. This method has its limitations and can pose various challenges, some of which were addressed by the introduction of Database Management Systems (DBMS). Here are five challenges of a file-based storage system and how they were tackled by DBMS:
1. Data Redundancy: Challenge: In a file-based system, data is often duplicated across multiple files, leading to data redundancy. This redundancy not only consumes extra storage space but also increases the chances of inconsistencies and errors in the data.
Tackled by DBMS: DBMS eliminates data redundancy by using a centralized approach to manage data. It establishes relationships between tables and enforces data integrity constraints, which ensures that data is not duplicated unnecessarily. This normalization process organizes data efficiently and reduces redundancy.
2. Data Integrity: Challenge: In file-based systems, there is no mechanism to ensure data integrity across multiple files. Data can be modified, deleted, or corrupted without any control or consistency checks, leading to inaccuracies and errors.
Tackled by DBMS: DBMS enforces data integrity by using ACID (Atomicity, Consistency, Isolation, Durability) properties. It ensures that data modifications follow rules and constraints defined by the database schema. Transactions are managed in a way that either all changes are committed or none are, ensuring that the data remains consistent and accurate.
3. Data Security: Challenge: File-based systems lack robust security measures. Access control is challenging to enforce, and there is no built-in authentication or authorization mechanism, making data vulnerable to unauthorized access and manipulation.
Tackled by DBMS: DBMS implements strong security features, such as user authentication, role-based access control, and data encryption. It restricts access to data based on user roles and permissions, safeguarding sensitive information from unauthorized users.
4. Data Retrieval and Manipulation: Challenge: In file-based systems, retrieving and manipulating data can be cumbersome. Writing custom programs for each data operation can lead to inefficiencies and complex code maintenance.
Tackled by DBMS: DBMS provides a declarative query language (e.g., SQL) that abstracts the underlying data storage details from users. This allows users to perform complex queries, insertions, deletions, and updates with simple commands, making data retrieval and manipulation more efficient and user-friendly.
5. Scalability and Performance: Challenge: File-based systems can struggle with scalability as the amount of data and concurrent users increase. As the system grows, performance bottlenecks may arise due to the lack of optimization mechanisms.
Tackled by DBMS: DBMS is designed with scalability and performance in mind. It optimizes query execution plans, indexes data for faster access, and supports concurrent access by multiple users. These optimizations ensure that the system can handle larger datasets and deliver better performance even under heavy loads.
5. List out the different types of classification in DBMS and explain them in depth.
Ans.  Database Management Systems (DBMS), classification is a way to categorize different types of databases based on their characteristics, data models, and organization. There are several types of classification in DBMS, and each has its unique features and advantages. Let's explore the main types in depth:

1. Relational Database Management System (RDBMS):
The relational database is the most widely used type of database in the industry. It organizes data into tables with rows and columns, where each row represents a record, and each column represents an attribute of the record. The relationships between tables are established through keys (primary keys and foreign keys). The key features of RDBMS are:
- Structure: Data is organized in a tabular form, which allows easy representation and understanding of the data.
- Flexibility: It supports ad-hoc queries using SQL (Structured Query Language) for data retrieval and manipulation.
- Integrity: RDBMS enforces integrity constraints like primary key uniqueness, foreign key references, and data type constraints to maintain data consistency.
- ACID properties: RDBMS ensures transactions are Atomic, Consistent, Isolated, and Durable, ensuring data reliability.
Examples of RDBMS include MySQL, PostgreSQL, Oracle Database, Microsoft SQL Server, and SQLite.
2. Object-Oriented Database Management System (OODBMS):
OODBMS extends the capabilities of RDBMS by supporting object-oriented concepts like classes, objects, inheritance, and polymorphism. It stores complex data structures (objects) directly and allows the retrieval of objects based on their attributes and relationships. Key features of OODBMS are:
- Object Persistence: Objects can be stored in the database and retrieved without losing their identity and relationships.
- Inheritance: OODBMS supports class inheritance, where objects inherit attributes and behaviours from their parent classes.
- Encapsulation: Objects encapsulate data and methods, providing a higher level of abstraction and security.
Examples of OODBMS include ObjectStore, db4o, and Versant.
3. Hierarchical Database Management System:
A hierarchical database organizes data in a tree-like structure with parent-child relationships. Each record (node) can have multiple child records, but each child can have only one parent. Hierarchical databases were popular in the early days of computing and were commonly used with IBM's Information Management System (IMS).
Key features of Hierarchical DBMS:
- Parent-Child Relationship: Each record (node) is linked to its parent node, forming a strict hierarchical structure.
- Speed: Retrieving records is efficient as it follows a predefined path from the root node to the desired record.
4. Network Database Management System:
Network databases also organize data in a tree-like structure, but unlike hierarchical databases, they allow more flexible relationships. In a network database, a record can have multiple parent and child records. This model was widely used with CODASYL (Conference on Data Systems Languages) databases.
Key features of Network DBMS:
- Complex Relationships: Records can have multiple owners, allowing more complex data representations than hierarchical databases.
- Flexibility: Network DBMS provides greater flexibility in data modelling.
Both hierarchical and network databases are now less commonly used compared to relational databases due to their complexities and limitations.
5. NoSQL Database Management System:
NoSQL (Not only SQL) databases are a group of databases that do not strictly adhere to the traditional relational model. They provide a flexible data model that can handle large volumes of unstructured or semi-structured data. NoSQL databases can be further categorized into four main types:
- Document-oriented: Store data in documents (e.g., JSON, BSON), and each document can have different attributes.
- Key-Value: Store data in a key-value pair format, suitable for caching and high-performance use cases.
- Column-family: Store data in column families, allowing flexible schema design and column-based storage.
- Graph: Store data in nodes and edges, suitable for representing complex relationships.
NoSQL databases are often used in big data and real-time applications, where scalability and high availability are critical. Examples of NoSQL databases include MongoDB, Cassandra, Redis, Amazon DynamoDB, and Neo4j.
Each type of classification in DBMS has its strengths and use cases, and the choice of database type depends on the specific requirements of the application and the data to be managed. Relational databases remain dominant for general-purpose applications, while NoSQL databases excel in handling massive volumes of unstructured data and providing horizontal scalability. Object-oriented databases are more niche and are used in specialized applications where object-oriented concepts are essential.
6. What is the significance of Data modelling and Explain the type of data modelling.
Ans. Data modelling is a crucial step in the database design process, where the conceptual representation of data and its relationships are created. It helps in understanding, organizing, and documenting the data requirements of an application or system. The significance of data modelling lies in its ability to provide the following benefits:
1. Clarity and Understanding: Data modelling helps stakeholders, including developers, business analysts, and end-users, to understand the data requirements and relationships. It provides a clear and visual representation of how data is structured and related, making it easier to communicate and agree on the data model.
2. Data Integrity: A well-designed data model enforces data integrity by defining constraints and rules that maintain the consistency and accuracy of data. This helps in avoiding data anomalies and inconsistencies during data entry and manipulation.
The types of data modelling:
1. Conceptual Data Model: The conceptual data model represents the highest level of abstraction and focuses on the business concepts and their relationships. It does not concern itself with implementation details but rather defines the main entities, their attributes, and the relationships between them. It provides a clear understanding of the data requirements from a business perspective. The Entity-Relationship Diagram (ERD) is a popular graphical representation used for conceptual data modelling.
2. Logical Data Model: The logical data model is an intermediate level of data modelling that translates the conceptual model into a technology-independent representation. It defines entities, attributes, and relationships in more detail than the conceptual model. The logical model does not consider the database system-specific implementation details but focuses on the logical structure of the data and how it relates. It is often presented in the form of a normalized relational schema or other data modelling notations like UML Class Diagrams.
3. Physical Data Model: The physical data model represents the actual implementation of the database on a specific database management system (DBMS). It defines the tables, columns, data types, indexes, and other implementation details required to create the database. The physical model optimizes data storage and retrieval for performance and considers the constraints of the target DBMS. It may include denormalization and other optimizations to meet the application's performance requirements.


7. Expalin 3 scheme architecture along with its advantages.
Ans. Classic 3-Tier Architecture:
Presentation Tier (User Interface): This is the top layer that deals with the user interface, where the user interacts with the application. It usually consists of web pages, forms, or mobile app screens.
Application Tier (Business Logic): The middle layer, where the business logic and application processing takes place. It handles user requests from the presentation tier, processes data, and interacts with the data tier.
Data Tier (Data Storage): The bottom layer that deals with data storage and retrieval. It can be a database or any other persistent data storage mechanism.
Advantages:
Modularity: Each layer is independent, making it easier to develop, test, and maintain the application components separately.
Scalability: Since each layer can be scaled independently, it allows for better load distribution and performance optimization.
Security: By isolating the data tier, you can implement strict access controls, enhancing the security of sensitive information.
MVC (Model-View-Controller) Architecture:
Model: Represents the data and business logic of the application.
View: Handles the user interface and presentation of the data.
Controller: Acts as an intermediary between the Model and View, processing user inputs and updating the Model and View accordingly.
Advantages:
Separation of Concerns: MVC enforces a clear separation between data, presentation, and application logic, making the codebase more organized and maintainable.
Code Reusability: With proper separation, components can be reused in different parts of the application or even in other projects.
Collaboration: The separation of responsibilities allows multiple developers to work simultaneously on different parts of the application with minimal conflicts.
Microservices Architecture:
Presentation Microservice: Handles the user interface and presentation logic.
Business Microservice: Contains the business logic and processes user requests.
Data Microservice: Manages data storage and retrieval operations.
Advantages:
Scalability: Each microservice can be scaled independently based on demand, allowing efficient resource utilization.
Flexibility: Microservices enable the use of different programming languages and technologies for different components, giving developers more freedom to choose the best tools for each task.
Isolation: By dividing the application into microservices, failures or issues in one service are less likely to affect the entire system, enhancing fault tolerance.









